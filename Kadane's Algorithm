class Solution {
    public int maxSubArray(int[] nums) {
        
        int maxSum = nums[0];
        int currSum = nums[0];

        HashMap<Integer , Integer> map = new HashMap<>();
        for(int i = 1 ; i< nums.length ;i++){
            
            currSum = Math.max(nums[i], currSum + nums[i]);

            maxSum =Math.max(maxSum , currSum);
            map.put(currSum , i);
        }
        return maxSum;
    }
}
/*
class Solution {
    int maxSubarraySum(int[] arr) {
        // Code here
        HashMap<Integer , Integer> map = new HashMap<>();
     
        int maxsum =Integer.MIN_VALUE;
        
        for(int i=0 ; i<arr.length ; i++){
               int sum =0;
            for(int j =i;j<arr.length;j++){
                 sum += arr[j];
                 maxsum = Math.max(maxsum , sum);
                 map.put(maxsum,j );
            }
        }
        for(Map.Entry<Integer ,Integer> entry :map.entrySet()){
            if(entry.getKey () > maxsum){
                maxsum = entry.getKey();
            }
        }
        return maxsum;
    }
}

 */
